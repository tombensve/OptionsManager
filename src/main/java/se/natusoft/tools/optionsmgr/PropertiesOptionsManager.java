/* 
 * 
 * PROJECT
 *     Name
 *         OptionsManager
 *     
 *     Description
 *         Manages application/tool options. Options are mapped to Java Bean properties
 *         using annotations. Help texts can be specified for options also using
 *         annotations and a complete help text can be generated by the options manager.
 *         Options can be loaded from command line arg String[] array, an XML file, or a
 *         java properties file.
 *         
 * COPYRIGHTS
 *     Copyright (C) 2009 by Natusoft AB All rights reserved.
 *     
 * LICENSE
 *     Apache 2.0 (Open Source)
 *     
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *     
 *       http://www.apache.org/licenses/LICENSE-2.0
 *     
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *     
 * AUTHORS
 *     tommy ()
 *         Changes:
 *         2014-07-09: Created!
 *         
 */
package se.natusoft.tools.optionsmgr;

import se.natusoft.tools.optionsmgr.internal.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

/**
 * Loads the options from a .properties file. Both the standard properties format and the properties
 * XML format is supported.
 * <p>
 * Boolean options annotated with 'flag=true' should have a blank value since just specifying the
 * option key will set the option true.
 * <p>
 * Even though it is possible to map properties to simple structured models without lists
 * of options you should strongly consider keeping the model structure for properties arguments very
 * simple. If you really need a complex structured config consider using one of the XML variants
 * of OptionManager instead.
 * <p>
 * This class is thread safe even though the very unlikely need for that!
 * <p>
 * The &lt;T&gt; is the top level option model to manage. Due to limitations in Java Generics the
 * Class object of this model class must also be passed to the constructor.
 */
public class PropertiesOptionsManager<T> extends OptionsManager<T> {

    //
    // Arguments
    //

    /**
     * The PropertiesOptionsManagers arguments.
     */
    private static class POMArguments implements Arguments {

        /** The stream to load properties from. */
        private InputStream propertiesStream = null;

        /** Use the properties XML format ? */
        private boolean xmlFormat = false;

        /** An already provided properties file. */
        private Properties properties = null;
    }

    //
    // Constructors
    //


    /**
     * Creates a new PropertiesOptionsManager.
     *
     * @param modelClass The class of the top model to load options into. An instance of this will be returned on loadOptions().
     *
     * @throws OptionsModelException on failure to parse the specified model class.
     */
    public PropertiesOptionsManager(Class modelClass) throws OptionsModelException {
        super(modelClass, OptionsManagerType.RANDOM);
        setModelPathSeparator(".");
    }

    //
    // Methods
    //

    /**
     * Loads the options and returns a populated model.
     *
     * @param propertiesFile The file to load the properties from.
     *
     * @throws OptionsException on failure or bad arguments.
     * @throws IOException on IO problems when loading options.
     */
    public T loadOptions(File propertiesFile) throws OptionsException, IOException {
        POMArguments arguments = new POMArguments();
        try {
            arguments.propertiesStream = new FileInputStream(propertiesFile);
        }
        catch (IOException ioe) {
            throw new OptionsException("Failed to open properties file!", ioe);
        }
        return loadOptions(arguments);
    }

    /**
     * Loads the options and returns a populated model.
     *
     * @param propertiesStream The stream to load the properties from.
     *
     * @throws OptionsException on failure or bad arguments.
     * @throws IOException on IO problems when loading options.
     */
    public T loadOptions(InputStream propertiesStream) throws OptionsException, IOException {
        POMArguments arguments = new POMArguments();
        arguments.propertiesStream = propertiesStream;
        return loadOptions(arguments);
    }

    /**
     * Loads the options and returns a populated model.
     *
     * @param propertiesFile The file to load the properties from.
     * @param xmlFormat If this is set to true the properties file is expected to be in the properties XML format.
     *
     * @throws OptionsException on failure or bad arguments.
     * @throws IOException on IO problems when loading options.
     */
    public T loadOptions(File propertiesFile, boolean xmlFormat) throws OptionsException, IOException {
        POMArguments arguments = new POMArguments();
        arguments.xmlFormat = xmlFormat;
        try {
            arguments.propertiesStream = new FileInputStream(propertiesFile);
        }
        catch (IOException ioe) {
            throw new OptionsException("Failed to open properties file!", ioe);
        }
        return loadOptions(arguments);
    }

    /**
     * Loads the options and returns a populated model.
     *
     * @param propertiesStream The stream to load the properties from.
     * @param xmlFormat If this is set to true the properties stream is expected to be in the properties XML format.
     *
     * @throws OptionsException on failure or bad arguments.
     * @throws IOException on IO problems when loading options.
     */
    public T loadOptions(InputStream propertiesStream, boolean xmlFormat) throws OptionsException, IOException {
        POMArguments arguments = new POMArguments();
        arguments.xmlFormat = xmlFormat;
        arguments.propertiesStream = propertiesStream;
        return loadOptions(arguments);
    }

    /**
     * Loads the options and returns a populated model.
     *
     * @param properties The properties to load into the managed model.
     *
     * @throws OptionsException on falure.
     * @throws IOException on IO problems when loading options.
     */
    public T loadOptions(Properties properties) throws OptionsException, IOException {
        POMArguments arguments = new POMArguments();
        arguments.properties = properties;
        return loadOptions(arguments);
    }

    /**
     * Implements the populating of the model from the properties file.
     *
     * @param optionInfos Extracted information about the specified options model to populate.
     * @param arguments The same Arguments as passed to loadOptions(Arguments).
     *
     * @throws Exception on any failure.
     */
    @Override
    protected void loadOptions(OptionInfos optionInfos, Arguments arguments) throws Exception {
        POMArguments loadArguments = (POMArguments)arguments;

        Properties props = loadArguments.properties;

        if (props == null) {
            props = new Properties();

            if (loadArguments.xmlFormat) {
                props.loadFromXML(loadArguments.propertiesStream);
            }
            else {
                props.load(loadArguments.propertiesStream);
            }
            loadArguments.propertiesStream.close();
        }
        
        for (String propKey : props.stringPropertyNames()) {
            String propValue = props.getProperty(propKey);

            OptionInfo optionInfo = optionInfos.getOptionInfoByPublicPath(new Path(propKey));
            if (optionInfo == null) {
                throw new OptionsException("'" + propKey + "' is not a known option!");
            }
            optionInfo.assureModelInstance();
            optionInfo.setValueAsString(propValue);
        }
    }

}
