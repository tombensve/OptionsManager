/* 
 * 
 * PROJECT
 *     Name
 *         OptionsManager
 *     
 *     Description
 *         Manages application/tool options. Options are mapped to Java Bean properties
 *         using annotations. Help texts can be specified for options also using
 *         annotations and a complete help text can be generated by the options manager.
 *         Options can be loaded from command line arg String[] array, an XML file, or a
 *         java properties file.
 *         
 * COPYRIGHTS
 *     Copyright (C) 2009 by Natusoft AB All rights reserved.
 *     
 * LICENSE
 *     Apache 2.0 (Open Source)
 *     
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *     
 *       http://www.apache.org/licenses/LICENSE-2.0
 *     
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *     
 * AUTHORS
 *     tommy ()
 *         Changes:
 *         2014-07-09: Created!
 *         
 */
package se.natusoft.tools.optionsmgr.internal.utils;

import org.w3c.dom.Attr;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import se.natusoft.tools.optionsmgr.OptionsException;

import java.util.*;

/**
 * This class was blatantly stolen from xob.sf.net (well xob is also made by me and I dont mind :-) for its usefullness
 * in wrapping a DOM structure and providing an easier api.
 */
public class XMLElement {
    //
    // Private class members
    //
    
    /** The name of the element. */
    private String name = null;
    
    /** The value of the element. */
    private String value = null;
    
    /** Child elements of this element. */
    private List<XMLElement> children = new ArrayList<XMLElement>();
        
    /** The attributes of the element. */
    private Map<String, XMLAttribute> attributes = new HashMap<String, XMLAttribute>();

    /** Collected element comments. */
    private StringBuilder comments = new StringBuilder();

    //
    // Constructors
    //
        
    /**
     * Creates a new XMLElementImpl.
     *
     * @param name The name of the element.
     */
    public XMLElement(String name) {
        this.name = name;
    }
    
    /**
     * Creates new XMLElementImpl.
     *
     * @param element The element to wrap.
     * @param readFilter 
     */
    public XMLElement(Element element) throws OptionsException {
        try {
            setName(element.getTagName());
            
            if (element.hasAttributes()) {
                NamedNodeMap attrs = element.getAttributes();
                for (int i = 0; i < attrs.getLength(); i++) {
                    Attr attr = (Attr)attrs.item(i);
                    XMLAttribute xmlAttr = new XMLAttribute(attr);
                    this.attributes.put(attr.getName(), xmlAttr);
                }
            }

            // Loop through all immediate children!
            Node node = element.getFirstChild();
            while (node != null) {
                if (node.getNodeType() == Node.TEXT_NODE) {
                    if (this.value != null) {
                        this.value = this.value + node.getNodeValue();
                    }
                    else {
                        this.value = node.getNodeValue();
                    }
                }
                else if (node.getNodeType() == Node.ELEMENT_NODE) {
                    XMLElement childElement = new XMLElement((Element)node);
                    this.children.add(childElement);
                }
                else if (node.getNodeType() == Node.COMMENT_NODE) {
                    this.comments.append(node.getNodeValue());
                }
                
                node = node.getNextSibling();
            }
        }
        catch (Exception e) {
            throw new OptionsException("Failed to create an XMLElement from DOM Element!", e);
        }
        if (this.value != null) {
            this.value = this.value.trim();
        }
    }
    
    //
    // Methods
    //
    
    /**
     * Sets the name of the element.
     *
     * @param name The name to set.
     */
    public void setName(String name) {
        this.name = name;
    }
    
    /**
     * Returns the name of the element.
     */
    public String getName() {
        return this.name;
    }
                    
    /**
     * Returns a List of all direct child elements as XMLElement objects.
     */
    public List<XMLElement> getChildElements() {
        return this.children;
    }

    /**
     * Returns true if this element has children.
     */
    public boolean elementHasChildren() {
        return this.children.size() > 0;
    }
            
    /**
     * Returns all attributes as XMLAttribute objects.
     */
    public Collection<XMLAttribute> getAttributes() {
        return this.attributes.values();
    }
        
    /**
     * Returns the value of a specific attribute. Null is returned if attribute does not exists.
     * This method asumes no namespace. If the attribute do have a namespace this will not find it
     * unless you specify namespace:name.
     *
     * @param name The name of the attribute to return.
     */
    public XMLAttribute getAttribute(String name) {
         return (XMLAttribute)this.attributes.get(name);
    }
    
    /**
     * Sets the element value.
     *
     * @param value The value to set.
     */
    public void setElementValue(String value) {
        this.value = value;
    }
    
    /**
     * Returns the elements text value.
     */
    public String getElementValue() {
        return this.value;
    }

    /**
     * Returns true if the element has a value.
     */
    public boolean elementHasValue() {
        return this.value != null && this.value.trim().length() > 0;
    }

    /**
     * Returns all element comments collected as one string.
     */
    public String getComments() {
        return this.comments.toString();
    }

    public String toString(String indent) {
        StringBuilder sb = new StringBuilder();

        sb.append(indent);
        sb.append("<");
        sb.append(getName());
        sb.append(">\n");
        sb.append(indent);
        sb.append("    ");
        sb.append(getElementValue());
        sb.append("\n");
        for (XMLElement child : getChildElements()) {
            sb.append(child.toString(indent + "    "));
        }
        sb.append(indent);
        sb.append("</");
        sb.append(getName());
        sb.append(">\n");

        return sb.toString();
    }

    public String toString() {
        return toString("");
    }
}
