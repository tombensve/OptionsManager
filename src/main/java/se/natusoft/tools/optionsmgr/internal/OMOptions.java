package se.natusoft.tools.optionsmgr.internal;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import se.natusoft.tools.codelicmgr.annotations.*;
import se.natusoft.tools.codelicmgr.enums.Source;

/**
 * This holds OptionsMangers internal options.
 */
@Project(
    name="OptionsManager",
    description="Manages application/tool options. Options are mapped to Java Bean properties" +
                "using annotations. Help texts can be specified for options also using" +
                "annotations and a complete help text can be generated by the options manager." +
                "Options can be loaded from command line arg String[] array, an XML file, or a" +
                "java properties file."
)
@Copyright(year="2009", holder="Natusoft AB", rights="All rights reserved.")
@License(
    type="Apache",
    version="2.0",
    description="Apache Software License",
    source=Source.OPEN,
    text={
        "Licensed under the Apache License, Version 2.0 (the 'License');",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "  http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an 'AS IS' BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License."
    }
)
@Authors({
    @Author(
        name="Tommy Svensson",
        email="tommy@natusoft.se",
        changes={
            @Change(when="2009-12-20", description="Created")
        }
    )
})
public class OMOptions {

    //
    // Constructors
    //

    /**
     * Creates a new instance.
     */
    public OMOptions() {
        // Default Date formats supported.
        dateFormats.add(new SimpleDateFormat("yyyy-MM-dd HH:mm"));
        dateFormats.add(new SimpleDateFormat("yyyy-MM-dd"));
        dateFormats.add(new SimpleDateFormat("HH:mm"));
    }

    //
    // DateFormats
    //

    /** Contains different date formats to try when parsing input. */
    private List<DateFormat> dateFormats = new ArrayList<DateFormat>();

    /**
     * Adds a SimpleDateFormat pattern for handling Date bean properties.
     *
     * @param pattern The pattern to add.
     */
    public void addSimpleDateFormat(String pattern) {
        this.dateFormats.add(new SimpleDateFormat(pattern));
    }

    /**
     * Adds a DateFormat instance for handlign Date bean proprties.
     *
     * @param dateFormat The DateFormat to add.
     */
    public void addDateFormat(DateFormat dateFormat) {
        this.dateFormats.add(dateFormat);
    }

    /**
     * Tries to format the dateValue with each supplied format until success or end of formats in which case null is returned.
     *
     * @param dateValue A String to be converted to a Date object.
     */
    public Date toDate(String dateValue) {
        Date date = null;

        for (DateFormat dateFormat : this.dateFormats) {
            try {
                date = dateFormat.parse(dateValue);
                if (date != null) {
                    break;
                }
            } catch (ParseException pe) {}
        }

        return date;
    }

    //
    // OptionsManagerType

    /** The type of the running OptionsManager subclass. */
    private OptionsManagerType optionsManagerType;

    /**
     * Returns the type of the running OptionsManager subclass: RANDOM or SEQUENTIAL.
     */
    public OptionsManagerType getOptionsManagerType() {
        return this.optionsManagerType;
    }

    /**
     * Sets the type of the running OptionsManager subclass.
     *
     * @param optionsManagerType The type to set.
     */
    public void setOptionsManagerType(OptionsManagerType optionsManagerType) {
        this.optionsManagerType = optionsManagerType;
    }

    //
    // PublicPathSeparatopr
    //

    /** The public path separator for displaying paths to users. */
    private String publicPathSeparator = ".";

    /**
     * Returns the public path separator.
     */
    public String getPublicPathSeparator() {
        return this.publicPathSeparator;
    }

    /**
     * Sets the public path separator. Default is ".".
     *
     * @param pathSeparator The path separator to set.
     */
    public void setPublicPathSeparator(String pathSeparator) {
        this.publicPathSeparator = pathSeparator;
    }

}
