package se.natusoft.tools.optionsmgr.internal;

import se.natusoft.tools.codelicmgr.annotations.*;
import se.natusoft.tools.codelicmgr.enums.Source;

/**
 * This represents a path in an options model.
 */
@Project(
    name="OptionsManager",
    description="Manages application/tool options. Options are mapped to Java Bean properties" +
                "using annotations. Help texts can be specified for options also using" +
                "annotations and a complete help text can be generated by the options manager." +
                "Options can be loaded from command line arg String[] array, an XML file, or a" +
                "java properties file."
)
@Copyright(year="2009", holder="Natusoft AB", rights="All rights reserved.")
@License(
    type="Apache",
    version="2.0",
    description="Apache Software License",
    source=Source.OPEN,
    text={
        "Licensed under the Apache License, Version 2.0 (the 'License');",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "  http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an 'AS IS' BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License."
    }
)
@Authors({
    @Author(
        name="Tommy Svensson",
        email="tommy@natusoft.se",
        changes={
            @Change(when="2009-12-07", description="Created")
        }
    )
})
public class Path {
    //
    // Constants
    //
    
    /** What separates the components of the path. */
    public static final String PATH_SEPARATOR = ".";

    //
    // Private Members
    //

    /** Holds the path. */
    private String path;

    //
    // Constructors
    //

    /**
     * Crates a new empty Path. 
     */
    public Path() {
        this.path = "";
    }

    /**
     * Creates a new Path by cloning another Path.
     * 
     * @param path The Path to clone.
     */
    public Path(Path path) {
        this.path = path.path;
    }

    /**
     * Creates a new Path.
     *
     * @param path The path as a string.
     */
    public Path(String path) {
        this.path = path;
    }

    /**
     * Creates a new Path from a string path and a name.
     *
     * @param rootpath The string path root.
     * @param name The name to add to the path.
     */
    public Path (String rootpath, String name) {
        if (rootpath.trim().length() == 0) {
            this.path = name;
        }
        else {
            this.path = rootpath + PATH_SEPARATOR + name;
        }
    }

    /**
     * Creates a new Path from another Path and a name.
     *
     * @param rootpath The path to add to to create the new path.
     * @param name The name to add to the path.
     */
    public Path(Path rootpath, String name) {
        if (rootpath.isEmpty()) {
            this.path = name;
        }
        else {
            this.path = rootpath.path + PATH_SEPARATOR + name;
        }
    }

    //
    // Methods
    //

    /**
     * Returns a Path from the specified string separated with the specified separator.
     * @param toPath The string to convert to a Path.
     * @param pathSeparator What separates the string into components of the path.
     */
    public static Path fromStringSeparatedBy(String toPath, String pathSeparator) {
        return new Path(toPath.replaceAll("\\" + pathSeparator, PATH_SEPARATOR));
    }

    /**
     * Returns true if this path is empty.
     */
    public boolean isEmpty() {
        return this.path.trim().length() == 0;
    }

    /**
     * Returns the path as a String. This is identical to toString()!
     */
    public String getPathAsString() {
        return this.path;
    }

    /**
     * Returns the path as a String separated with the specified path separator.
     * 
     * @param separator The separator to use to separate path components.
     */
    public String getPathAsStringSeparatedBy(String separator) {
        return this.path.replaceAll("\\" + PATH_SEPARATOR, separator);
    }

    /**
     * Returns the parent Path.
     */
    public Path getParentPath() {
        int ix = this.path.lastIndexOf(PATH_SEPARATOR);
        String newPath = this.path;
        if (ix > 0) {
            newPath = newPath.substring(0, ix);
        }
        return new Path(newPath);
    }

    /**
     * Compares 2 Path objects. Can also be compare to a String path.
     * @param compareTo The object to compare this to.
     */
    @Override
    public boolean equals(Object compareTo) {
        if (compareTo instanceof String) {
            return this.path.equals(compareTo);
        }
        else if (compareTo instanceof Path) {
            return this.path.equals(((Path)compareTo).path);
        }
        return false;
    }

    /**
     * Provides the hash code for this object. Actually returns the internal String path hash code!
     */
    @Override
    public int hashCode() {
        return this.path.hashCode();
    }

    /**
     * Returns the path as a String.
     */
    @Override
    public String toString() {
        return this.path;
    }
}
