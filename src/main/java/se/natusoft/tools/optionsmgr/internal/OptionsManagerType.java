/* 
 * 
 * PROJECT
 *     Name
 *         OptionsManager
 *     
 *     Description
 *         Manages application/tool options. Options are mapped to Java Bean properties
 *         using annotations. Help texts can be specified for options also using
 *         annotations and a complete help text can be generated by the options manager.
 *         Options can be loaded from command line arg String[] array, an XML file, or a
 *         java properties file.
 *         
 * COPYRIGHTS
 *     Copyright (C) 2009 by Natusoft AB All rights reserved.
 *     
 * LICENSE
 *     Apache 2.0 (Open Source)
 *     
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *     
 *       http://www.apache.org/licenses/LICENSE-2.0
 *     
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *     
 * AUTHORS
 *     tommy ()
 *         Changes:
 *         2014-07-09: Created!
 *         
 */
package se.natusoft.tools.optionsmgr.internal;

/**
 * This enum identifies the 2 different types of OptionManager subclasses.
 * <p>
 * RANDOM should be used when the loaded data can come in any order. This
 * will make sure that there are parent models if lower level model data
 * are supplied before higher level model data. A typical example is when
 * information is loaded from command line arguments wich can be specified
 * in any order.
 * <p>
 * SEQUENTIAL should be used when you know the data is always supplied in
 * a sequential, structured order like XML files for example. This is the
 * only case in which you can have collections of submodels whose data
 * needs to come sequentially. In this case parent models should always
 * have been instantiated before any child is loaded. In this mode models
 * are always instantiated since we can have more than one of the same
 * model, which is never the case for RANDOM. 
 */
public enum OptionsManagerType {

    /** This type handles loaded input in random order. */
    RANDOM,

    /** This type expects loaded input to be in sequential and structured order. */
    SEQUENTIAL;
}
