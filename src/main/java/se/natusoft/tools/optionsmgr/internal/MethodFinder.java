/* 
 * 
 * PROJECT
 *     Name
 *         OptionsManager
 *     
 *     Description
 *         Manages application/tool options. Options are mapped to Java Bean properties
 *         using annotations. Help texts can be specified for options also using
 *         annotations and a complete help text can be generated by the options manager.
 *         Options can be loaded from command line arg String[] array, an XML file, or a
 *         java properties file.
 *         
 * COPYRIGHTS
 *     Copyright (C) 2009 by Natusoft AB All rights reserved.
 *     
 * LICENSE
 *     Apache 2.0 (Open Source)
 *     
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *     
 *       http://www.apache.org/licenses/LICENSE-2.0
 *     
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *     
 * AUTHORS
 *     tommy ()
 *         Changes:
 *         2014-07-09: Created!
 *         
 */
package se.natusoft.tools.optionsmgr.internal;

import java.lang.reflect.Method;

/**
 * Utility for finding several alternative method signatures.
 */
public class MethodFinder {

    //
    // Inner Classes
    //

    /**
     * Provides information about method to find.
     */
    public static class MethodDesc {

        //
        // Private Members
        //

        /** The name of the method. */
        private String name;

        /** The argument types of the method. */
        private Class[] argTypes;

        //
        // Constuctors
        //

        /**
         * Creates a new MethodDesc instance.
         *
         * @param name The name of a method to find.
         * @param argTypes The argument types of the method to find.
         */
        public MethodDesc(String name, Class[] argTypes) {
            this.name = name;
            this.argTypes = argTypes;
        }

        //
        // Methods
        //

        /**
         * Returns the name of the method to find.
         */
        public String getName() {
            return this.name;
        }

        /**
         * Returns the argument types of the method to find.
         */
        public Class[] getArgTypes() {
            return this.argTypes;
        }

        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append("name='" + this.name + "', argTypes=[");
            for (Class argClass : argTypes) {
                sb.append(argClass.getName());
                sb.append(" ");
            }
            sb.append("]");

            return sb.toString();
        }

    }

    //
    // Constructors
    //

    /**
     * This is a static utility class so we disable instantiation.
     */
    private MethodFinder() {}

    //
    // Methods
    //

    /**
     * Looks for the specified methods in the specified class returning the first method found in the class.
     *
     * @param searchClass The class to search for the methods.
     * @param methodsToFind Information about the methods to look for.
     *
     * @return The found method.
     *
     * @throws NoSuchMethodException If none of the methods were found.
     */
    public static Method findMethod(Class searchClass, MethodDesc[] methodsToFind) throws NoSuchMethodException {
        Method found = null;

        for(MethodDesc methodDesc : methodsToFind) {
            try {
                found = searchClass.getMethod(methodDesc.getName(), methodDesc.getArgTypes());
            }
            catch (NoSuchMethodException nsme) {
                // Do nothing.
            }
            if (found != null) {
                break;
            }
        }

        if (found == null) {
            throw new NoSuchMethodException("None of the tested methods were found!");
        }

        return found;
    }

}
