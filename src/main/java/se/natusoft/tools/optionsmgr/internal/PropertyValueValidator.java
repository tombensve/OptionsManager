/* 
 * 
 * PROJECT
 *     Name
 *         OptionsManager
 *     
 *     Description
 *         Manages application/tool options. Options are mapped to Java Bean properties
 *         using annotations. Help texts can be specified for options also using
 *         annotations and a complete help text can be generated by the options manager.
 *         Options can be loaded from command line arg String[] array, an XML file, or a
 *         java properties file.
 *         
 * COPYRIGHTS
 *     Copyright (C) 2009 by Natusoft AB All rights reserved.
 *     
 * LICENSE
 *     Apache 2.0 (Open Source)
 *     
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *     
 *       http://www.apache.org/licenses/LICENSE-2.0
 *     
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *     
 * AUTHORS
 *     tommy ()
 *         Changes:
 *         2014-07-09: Created!
 *         
 */
package se.natusoft.tools.optionsmgr.internal;

/**
 * Valides property values.
 */
public class PropertyValueValidator {

    //
    // Private Members
    //

    /** A regular expression for validation. */
    private String validate = null;

    /** A set of valid values for a property. */
    private String[] validValues = null;

    //
    // Constructors
    //

    /**
     * Creates a new PropertyValueValidator instance.
     *
     * @param validate A regular expression that a property value must match.
     */
    public PropertyValueValidator(String validate) {
        this.validate = validate;
    }

    /**
     * Creates an new PropertyValueValidator instance.
     *
     * @param validValues A set of valid values for the property value.
     */
    public PropertyValueValidator(String[] validValues) {
        this.validValues = validValues;
    }

    /**
     * Creates a new PropertyValueValidator instance.
     */
    public PropertyValueValidator() {}

    //
    // Methods
    //

    /**
     * Returns true if validaton is available.
     */
    public boolean hasValidation() {
        return this.validate != null || this.validValues != null;
    }

    /**
     * Returns true if the specified value is valid.
     */
    public boolean isValid(String value) {
        boolean valid = true;

        if (this.validate != null) {
            valid = value.matches(this.validate);
        }
        else if (this.validValues != null) {
            valid = false;
            for (String validValue : this.validValues) {
                if (value.equals(validValue)) {
                    valid = true;
                    break;
                }
            }
        }

        return valid;
    }

    /**
     * Returns part of an error message to use when match fails.
     */
    public String getMustMatchText() {
        String mustMatch = "";
        if (this.validate != null) {
            mustMatch = "Value must match \"" + this.validate + "\"";
        }
        else if (this.validValues != null) {
            StringBuilder sb = new StringBuilder();
            String comma = "";
            for (String validValue : this.validValues) {
                sb.append(comma);
                sb.append('"');
                sb.append(validValue);
                sb.append('"');
                comma = ", ";
            }
            mustMatch = "Value must be one of the following values: " + sb.toString();
        }

        return mustMatch;
    }

    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("PropertyValueValidator {");
        if (this.validate != null) {
            sb.append("validate=\"");
            sb.append(this.validate);
            sb.append("\"");
        }
        else if (this.validValues != null) {
            sb.append("validValues=[");
            String comma = "";
            for (String validValue : this.validValues) {
                sb.append(comma);
                sb.append(validValue);
                comma = ", ";
            }
            sb.append("]");
        }
        sb.append("}");

        return sb.toString();
    }
}
